pipeline{
    agent any

    /*
    environment{
        DOCKER_IMAGE = 'apimonedastt'
        CONTAINER_NAME = 'dockerapimonedastt'
        DOCKER_NETWORK = 'tt_db_monedas_red'
        HOST_PORT = '9080'
        CONTAINER_PORT = '8080'
    }
    */
    environment {
        DOCKER_IMAGE = 'moxow/api_monedas_tt' //Repositorio Docker
        KUBECONFIG = credentials('credencial-kubernetes') // ID de la credencial de kubernetes en pipeline Jenkins
    }

    stages{
        /*
        stage('CompilaciÃ³n Maven'){
            steps{
                bat 'mvn clean package -Dskiptests'
            }
        }
        */
        stage('Construir imagen'){
            steps{
                //dir("${DOCKER_BUILD_DIR}"){
                    bat "docker build . -t ${DOCKER_IMAGE}"
                //}
            }
        }
        /*
        stage('Limpiar contenedor existente') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        bat """
                        docker container inspect ${CONTAINER_NAME} >nul 2>&1 && (
                            docker container stop ${CONTAINER_NAME}
                            docker container rm ${CONTAINER_NAME}
                        ) || echo "No existe el contenedor '${CONTAINER_NAME}'."
                        """
                    }
                }
            }
        }
        */
        stage('Limpiar datos previos') {//Manifiestos api
            steps {
                script {
                    bat """
                    kubectl delete hpa apimonedas-hpa-tt --ignore-not-found
                    kubectl delete deployment apimonedas-deployment-tt --ignore-not-found
                    kubectl delete service apimonedas-servicio-tt --ignore-not-found
                    kubectl delete configmap apimonedas-configmap-tt --ignore-not-found
                    """
                }
            }
        }

        stage('Registrar Imagen API') {
            steps {// Credencial establecida en Jenkins para Docker hub [dockerHub]
                withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    bat """
                        docker push ${DOCKER_IMAGE}
                        docker logout
                    """
                }
            }
        }

        stage('Aplicar Manifiestos API') {
            steps {
                script {//Ruta fisica "\\"
                    bat """
                        kubectl apply -f _manifiestos\\api\\
                    """
                }
            }
        }

        stage('Despliegue API') {
            steps {
                script {
                    bat """
                        kubectl set image deployment/apimonedas-deployment-tt ${DOCKER_IMAGE} --record
                        kubectl rollout status deployment/apimonedas-deployment-tt
                    """
                }
            }
        }

        /*
        stage('Desplegar contenedor'){
            steps{
                bat "docker run --network ${DOCKER_NETWORK} --name ${CONTAINER_NAME} -p ${HOST_PORT}:${CONTAINER_PORT} -d ${DOCKER_IMAGE}"
            }
        }
        */
    
    }
}